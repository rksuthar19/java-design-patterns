Creational-----
prototpye-Think about cloning, and spring prototype bean.
singleton-Either Eagerly initialize which will guarantees thread (static Obje o=new Obj()) or check if null and then set it in synchronize block and make it sure in default constructor it's not set to null to avoide creation from reflection. 
builder-creating an object in certain way that won't break funcationality, forcing to construct object in particular way.
factory-Define an interface for creating an object, but let subclasses decide which class to instantiate. (factory interface-factory provicers-objects)
abstract factory-Provide an interface for creating families of related or dependent objects without specifying their concrete classes.(factory of factory)

Behavioral Patterns------
visitor-Represent an operation to be performed on elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates. Visitable "accepts" Visitor and there are multiple VisitableElements and multiple VisitorDepending upon element.
strategy-TempFile.createFile() TempFile class have file creation strategy ..by implementing new strategy you can specify how to create temp file.
state-vending machine producing diff-diff result based on state


Structural Patterns------
Adapter-Convert the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
Service locator- 
      Service service = ServiceLocator.getService("Service1");
      service.execute();
      service = ServiceLocator.getService("Service2");
      service.execute();
      service = ServiceLocator.getService("Service1");
      service.execute();
      service = ServiceLocator.getService("Service2");
      service.execute();		
